import groovy.xml.XmlUtil

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

group = rootProject.ext.bintray['groupId']
version = rootProject.ext.android['versionName']

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compileOnly files('libs/classes.jar')
    compileOnly rootProject.ext.libs.annotation
    compileOnly rootProject.ext.libs.recyclerview
    compileOnly rootProject.ext.libs.viewpager
    compileOnly rootProject.ext.libs.design
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                name 'SmoothRefreshLayout-Core'
                groupId rootProject.ext.bintray['groupId']
                url rootProject.ext.bintray['siteUrl']
                artifactId 'core'
                description 'A highly efficient refresh library for Android, Can support all Views.'
                licenses {
                    license {
                        name rootProject.ext.bintray['licenseName']
                        url rootProject.ext.bintray['licenseUrl']
                    }
                }
                developers {
                    developer {
                        id rootProject.ext.bintray['developerId']
                        name rootProject.ext.bintray['developerName']
                        email rootProject.ext.bintray['developerEmail']
                    }
                }
                scm {
                    connection rootProject.ext.bintray['gitUrl']
                    developerConnection rootProject.ext.bintray['gitUrl']
                    url rootProject.ext.bintray['siteUrl']
                }
            }
        }
    }
}

gradle.buildFinished { project ->
    Thread.start {
        def imlFile = file("../.idea/modules/core/SmoothRefreshLayout-master.core.iml")
        println 'We need invoke the hidden api, so we must keep the custom jar in front of the android.jar'
        try {
            def parsedXml = (new XmlParser()).parse(imlFile)
            def jdkNode = parsedXml.component[1].orderEntry.find { it.'@type' == 'jdk' }
            def jdkName = jdkNode.attributes()['jdkName']
            def jdkType = jdkNode.attributes()['jdkType']
            parsedXml.component[1].remove(jdkNode)
            new Node(parsedXml.component[1], 'orderEntry',
                    [
                            'type'   : 'jdk',
                            'jdkName': jdkName,
                            'jdkType': jdkType
                    ])
            def text=XmlUtil.serialize(parsedXml)
            imlFile.withWriter("UTF8") { writer ->
                writer.write(text)
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace()
        }
    }
}
